// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductInvoice.Models;

#nullable disable

namespace ProductInvoice.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220727100026_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProductInvoice.Models.Discount", b =>
                {
                    b.Property<Guid>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DiscountCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DiscountExpiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("ProductInvoice.Models.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InvoiceCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ProductInvoice.Models.InvoiceItems", b =>
                {
                    b.Property<Guid>("InvoiceItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NoOfItems")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceItemsId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("ProductInvoice.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductBasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("352e8789-e944-496c-8d6d-67da0b3fc2be"),
                            ProductBasePrice = 9999m,
                            ProductCategory = "Mobiles",
                            ProductCreated = new DateTime(2022, 7, 27, 15, 30, 25, 889, DateTimeKind.Local).AddTicks(6175),
                            ProductName = "Novice",
                            ProductUpdated = new DateTime(2022, 7, 27, 15, 30, 25, 889, DateTimeKind.Local).AddTicks(6191)
                        },
                        new
                        {
                            ProductId = new Guid("53249ff4-b284-4202-843a-e3cb05688923"),
                            ProductBasePrice = 49999m,
                            ProductCategory = "Television",
                            ProductCreated = new DateTime(2022, 7, 27, 15, 30, 25, 889, DateTimeKind.Local).AddTicks(6196),
                            ProductName = "Stans Pro",
                            ProductUpdated = new DateTime(2022, 7, 27, 15, 30, 25, 889, DateTimeKind.Local).AddTicks(6196)
                        },
                        new
                        {
                            ProductId = new Guid("dcfe7f16-1125-4805-b756-7b7114cc6cf6"),
                            ProductBasePrice = 19999m,
                            ProductCategory = "Washing Machine",
                            ProductCreated = new DateTime(2022, 7, 27, 15, 30, 25, 889, DateTimeKind.Local).AddTicks(6227),
                            ProductName = "Ultra Washing",
                            ProductUpdated = new DateTime(2022, 7, 27, 15, 30, 25, 889, DateTimeKind.Local).AddTicks(6228)
                        },
                        new
                        {
                            ProductId = new Guid("6c5c6945-6376-4e38-be16-80ff85341ffa"),
                            ProductBasePrice = 59999m,
                            ProductCategory = "Air Conditioner",
                            ProductCreated = new DateTime(2022, 7, 27, 15, 30, 25, 889, DateTimeKind.Local).AddTicks(6230),
                            ProductName = "Cool Breeze",
                            ProductUpdated = new DateTime(2022, 7, 27, 15, 30, 25, 889, DateTimeKind.Local).AddTicks(6230)
                        },
                        new
                        {
                            ProductId = new Guid("a532e0ec-73ee-43f3-9dd2-b8a1d5ed470c"),
                            ProductBasePrice = 99999m,
                            ProductCategory = "Laptop",
                            ProductCreated = new DateTime(2022, 7, 27, 15, 30, 25, 889, DateTimeKind.Local).AddTicks(6232),
                            ProductName = "T14",
                            ProductUpdated = new DateTime(2022, 7, 27, 15, 30, 25, 889, DateTimeKind.Local).AddTicks(6233)
                        });
                });

            modelBuilder.Entity("ProductInvoice.Models.Discount", b =>
                {
                    b.HasOne("ProductInvoice.Models.Product", null)
                        .WithMany("discounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductInvoice.Models.InvoiceItems", b =>
                {
                    b.HasOne("ProductInvoice.Models.Invoice", null)
                        .WithMany("invoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductInvoice.Models.Product", null)
                        .WithMany("invoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductInvoice.Models.Invoice", b =>
                {
                    b.Navigation("invoiceItems");
                });

            modelBuilder.Entity("ProductInvoice.Models.Product", b =>
                {
                    b.Navigation("discounts");

                    b.Navigation("invoiceItems");
                });
#pragma warning restore 612, 618
        }
    }
}
